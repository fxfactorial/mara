using list
using vect

func test1(a, b)
    return a + b
end

func test2(a, b)
  return a - b
end

func test3(a, b)
  return a * b
end

func test4(a, b)
  return a / b
end

func test5(a, b)
  return a % b
end

func test6(a, b)
  a ++ b
  return a
end

func test7(a, b)
  a -- b
  return a
end

func test8(a, b)
  a ** b
  return a
end

func test9(a, b)
  a // b
  return a
end

func test10(a, b)
  a %% b
  return a
end

func test11(a, b)
  return a bitand b
end

func test12(a, b)
  return a bitor b
end

func test13(a, b)
  return a bitxor b
end

func test14(a, b)
  return a bitls 2
end

func test15(a, b)
  return a bitrs 2
end

func test16(a, b)
  a && b
  return a
end

func test17(a, b)
  a || b
  return a
end

func test18(a, b)
  a ^^ b
  return a
end

func test19(a, b)
  b <<<< 2
  return b
end

func test20(a, b)
  b >>>> 2
  return b
end

func test21(a, b)
  return (a = 1337) and (b = 42)
end

func test22(a, b)
  return (a = 1337) or (b < 42)
end

func test23(a, b)
  return (a = 1337) and (b != 42)
end

func test24(a, b)
  return (a <> 1337) or (b = 12)
end

func test25(a, b)
  return b > 0 ? 123 : 0
end

func test26(a, b)
  var f <- (lambda(x, y): return x + y)
  return f(a, b)
end

func test27(a, b)
  var l <- [1; 2; 3; 4; 5]
  var res <- 0

  l.map((lambda(x): return x bitls 1))
  res <- l[2]

  del l
  return res
end

func test28(a, b)
  var l <- [5; 4; 3; 2; 1]
  var res <- 0

  l.mapi((lambda(i, x): return i + x))
  res <- l[2]

  del l
  return res
end

func test29(a, b)
  var l <- [5; 4; 3; 2; 1]
  var res <- 0

  res <- l.for_all((lambda(x): return x != 42))

  del l
  return res
end

func test30(a, b)
  var l <- [5; 4; 3; 2; 1]
  var res <- 0

  res <- l.exists((lambda(x): return x = 2))

  del l
  return res
end

func test31(a, b)
  return "hello"["ABCDE"[b - 41] / 21]
end

func test32(a, b)
  var s <- "hello"
  s[b - 41] <- s[1] - 'a' + 'A'
  return s[1]
end

func test33(a, b)
  var l <- [1; a; b]

  l[1] <- 123

  return l[1]
end

func test34(a, b)
  var v <- {1; 2; b}
  v[1] <- a
  return v[1] + v[2] + v[0] + vect_len(v)
end

extern ctest35: integer -> integer -> integer

func test35(a, b)
  ctest35(a, b)
end

func test36(a, b)
  var v <- vect_init(3, (lambda(x): x * x))
  return v[2] + vect_len(v)
end